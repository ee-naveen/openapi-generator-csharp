{{>partial_header}}

using System.Collections.Generic;
using System.Linq;

using System.Text.Json;
using NUnit.Framework;

using {{packageName}}.{{apiPackage}};
using {{packageName}}.{{modelPackage}};
using {{packageName}}.Client;

namespace {{packageName}}.Test.Client
{
    public class PolymorphicSerializationTests
    {
        [Test]
        public void TestSimplePolymorphicSerialization()
        {
            var animal =
                JsonSerializer.Deserialize<IAnimal>("{\"Kind\":\"Dog\",\"Breed\":\"Jack Russell Terrier\"}");
            Assert.AreEqual("Jack Russell Terrier", (animal as Dog)?.Breed);
        }

        [Test]
        public void DeserializeObjectWithCustomMapping()
        {
            var animal =
                JsonSerializer.Deserialize<Animal2>("{\"Sound\":\"Bark\",\"Breed\":\"Jack Russell Terrier\"}");
            Assert.AreEqual("Jack Russell Terrier", (animal as Dog2)?.Breed);
        }

        // NOTE: Property-based polymorphism is not directly supported in System.Text.Json
        // The test below is commented out as it requires custom converter implementation
        /*
        [Test]
        public void DeserializeObjectMappingByPropertyPresence()
        {
            string json =
                "[{\"Department\":\"Department1\",\"JobTitle\":\"JobTitle1\",\"FirstName\":\"FirstName1\",\"LastName\":\"LastName1\"}," +
                "{\"Department\":\"Department1\",\"JobTitle\":\"JobTitle1\",\"FirstName\":\"FirstName1\",\"LastName\":\"LastName1\"}," +
                "{\"Skill\":\"Painter\",\"FirstName\":\"FirstName1\",\"LastName\":\"LastName1\"}]";


            var persons = JsonSerializer.Deserialize<ICollection<Person>>(json);
            Assert.AreEqual("Painter", (persons.Last() as Artist)?.Skill);
        }
        */
    }

    [JsonPolymorphic(TypeDiscriminatorPropertyName = "Kind")]
    [JsonDerivedType(typeof(Dog), "Dog")]
    [JsonDerivedType(typeof(Cat), "Cat")]
    public interface IAnimal
    {
        string Kind { get; }
    }

    public class Dog : IAnimal
    {
        public Dog()
        {
            Kind = "Dog";
        }

        public string Kind { get; }
        public string Breed { get; set; }
    }

    class Cat : IAnimal
    {
        public Cat()
        {
            Kind = "Cat";
        }

        public string Kind { get; }
        bool Declawed { get; set; }
    }

    [JsonPolymorphic(TypeDiscriminatorPropertyName = "Sound")]
    [JsonDerivedType(typeof(Dog2), "Bark")]
    [JsonDerivedType(typeof(Cat2), "Meow")]
    public class Animal2
    {
        public virtual string Sound { get; }
        public string Color { get; set; }
    }

    public class Dog2 : Animal2
    {
        public Dog2()
        {
            Sound = "Bark";
        }

        public override string Sound { get; }
        public string Breed { get; set; }
    }

    public class Cat2 : Animal2
    {
        public Cat2()
        {
            Sound = "Meow";
        }

        public override string Sound { get; }
        public bool Declawed { get; set; }
    }

    // NOTE: Property-based polymorphism requires custom converter in System.Text.Json
    /*
    [JsonPolymorphic] // Would need custom converter for property-based discrimination
    public class Person
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
    }

    public class Employee : Person
    {
        public string Department { get; set; }
        public string JobTitle { get; set; }
    }

    public class Artist : Person
    {
        public string Skill { get; set; }
    }
    */
}
