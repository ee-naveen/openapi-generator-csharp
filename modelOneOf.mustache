{{#model}}
    /// <summary>
    /// {{description}}{{^description}}{{classname}}{{/description}}
    /// </summary>
    {{#vendorExtensions.x-cls-compliant}}
    [CLSCompliant({{{.}}})]
    {{/vendorExtensions.x-cls-compliant}}
    {{#vendorExtensions.x-com-visible}}
    [ComVisible({{{.}}})]
    {{/vendorExtensions.x-com-visible}}
    [JsonConverter(typeof({{classname}}JsonConverter))]
    [DataContract(Name = "{{{name}}}")]
    {{>visibility}} partial class {{classname}} : {{#lambda.joinWithComma}}AbstractOpenAPISchema  {{#parent}}{{{.}}}  {{/parent}}{{#equatable}}IEquatable<{{classname}}>  {{/equatable}}{{#validatable}}IValidatableObject  {{/validatable}}{{/lambda.joinWithComma}}
    {
        {{#isNullable}}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}" /> class.
        /// </summary>
        public {{classname}}()
        {
            this.IsNullable = true;
            this.SchemaType= "oneOf";
        }

        {{/isNullable}}
        {{#composedSchemas.oneOf}}
        {{^vendorExtensions.x-duplicated-data-type}}
        {{^isNull}}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}" /> class
        /// with the <see cref="{{#lambdaCref}}{{{dataType}}}{{/lambdaCref}}" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of {{dataType}}.</param>
        public {{classname}}({{{dataType}}} actualInstance)
        {
            this.IsNullable = {{#model.isNullable}}true{{/model.isNullable}}{{^model.isNullable}}false{{/model.isNullable}};
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance{{^model.isNullable}}{{^isPrimitiveType}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/isPrimitiveType}}{{#isPrimitiveType}}{{#isArray}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/isArray}}{{/isPrimitiveType}}{{#isPrimitiveType}}{{#isFreeFormObject}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/isFreeFormObject}}{{/isPrimitiveType}}{{#isPrimitiveType}}{{#isString}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/isString}}{{/isPrimitiveType}}{{/model.isNullable}};
        }

        {{/isNull}}
        {{/vendorExtensions.x-duplicated-data-type}}
        {{/composedSchemas.oneOf}}

        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                {{#oneOf}}
                {{^-first}}else {{/-first}}if (value.GetType() == typeof({{{.}}}) || value is {{{.}}})
                {
                    this._actualInstance = value;
                }
                {{/oneOf}}
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types:{{#oneOf}} {{{.}}}{{^-last}},{{/-last}}{{/oneOf}}");
                }
            }
        }
        {{#composedSchemas.oneOf}}
        {{^vendorExtensions.x-duplicated-data-type}}
        {{^isNull}}

        /// <summary>
        /// Get the actual instance of `{{dataType}}`. If the actual instance is not `{{dataType}}`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of {{dataType}}</returns>
        public {{{dataType}}} Get{{#lambda.titlecase}}{{baseType}}{{/lambda.titlecase}}{{#isArray}}{{#lambda.titlecase}}{{{dataFormat}}}{{/lambda.titlecase}}{{/isArray}}()
        {
            return ({{{dataType}}})this.ActualInstance;
        }
        {{/isNull}}
        {{/vendorExtensions.x-duplicated-data-type}}
        {{/composedSchemas.oneOf}}

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class {{classname}} {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonSerializer.Serialize(this.ActualInstance, {{classname}}.SerializerOptions);
        }

        /// <summary>
        /// Converts the JSON string into an instance of {{classname}}
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of {{classname}}</returns>
        public static {{classname}} FromJson(string jsonString)
        {
            {{classname}} new{{classname}} = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return new{{classname}};
            }
            {{#useOneOfDiscriminatorLookup}}
            {{#discriminator}}

            try
            {
                using JsonDocument doc = JsonDocument.Parse(jsonString);
                var discriminatorValue = doc.RootElement.TryGetProperty("{{{propertyBaseName}}}", out var discriminatorElement) ? discriminatorElement.GetString() : string.Empty;
                switch (discriminatorValue)
                {
                    {{#mappedModels}}
                    case "{{{mappingName}}}":
                        new{{classname}} = new {{classname}}(JsonSerializer.Deserialize<{{{modelName}}}>(jsonString, {{classname}}.AdditionalPropertiesSerializerOptions));
                        return new{{classname}};
                    {{/mappedModels}}
                    default:
                        System.Diagnostics.Debug.WriteLine(string.Format("Failed to lookup discriminator value `{0}` for {{classname}}. Possible values:{{#mappedModels}} {{{mappingName}}}{{/mappedModels}}", discriminatorValue));
                        break;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to parse the json data : `{0}` {1}", jsonString, ex.ToString()));
            }

            {{/discriminator}}
            {{/useOneOfDiscriminatorLookup}}
            int match = 0;
            List<string> matchedTypes = new List<string>();
            {{#oneOf}}

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerOptions to deserialize
                if (typeof({{{.}}}).GetProperty("AdditionalProperties") == null)
                {
                    new{{classname}} = new {{classname}}(JsonSerializer.Deserialize<{{{.}}}>(jsonString, {{classname}}.SerializerOptions));
                }
                else
                {
                    new{{classname}} = new {{classname}}(JsonSerializer.Deserialize<{{{.}}}>(jsonString, {{classname}}.AdditionalPropertiesSerializerOptions));
                }
                matchedTypes.Add("{{{.}}}");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into {{{.}}}: {1}", jsonString, exception.ToString()));
            }
            {{/oneOf}}

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return new{{classname}};
        }

        {{#equatable}}
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            {{#useCompareNetObjects}}
            return OpenAPIClientUtils.compareLogic.Compare(this, input as {{classname}}).AreEqual;
            {{/useCompareNetObjects}}
            {{^useCompareNetObjects}}
            return this.Equals(input as {{classname}});
            {{/useCompareNetObjects}}
        }

        /// <summary>
        /// Returns true if {{classname}} instances are equal
        /// </summary>
        /// <param name="input">Instance of {{classname}} to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals({{classname}} input)
        {
            {{#useCompareNetObjects}}
            return OpenAPIClientUtils.compareLogic.Compare(this, input).AreEqual;
            {{/useCompareNetObjects}}
            {{^useCompareNetObjects}}
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
            {{/useCompareNetObjects}}
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }
        {{/equatable}}
        {{#validatable}}

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
        {{/validatable}}
    }

    /// <summary>
    /// Custom JSON converter for {{classname}}
    /// </summary>
    public class {{classname}}JsonConverter : JsonConverter<{{classname}}>
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="options">JSON serializer options</param>
        public override void Write(Utf8JsonWriter writer, {{classname}} value, JsonSerializerOptions options)
        {
            writer.WriteRawValue(value.ToJson(), false);
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="typeToConvert">Object type</param>
        /// <param name="options">JSON serializer options</param>
        /// <returns>The object converted from the JSON string</returns>
        public override {{classname}} Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            switch(reader.TokenType) 
            {
                {{#composedSchemas.oneOf}}
                {{^vendorExtensions.x-duplicated-data-type}}
                {{#isInteger}}
                case JsonTokenType.Number: 
                    return new {{classname}}(reader.GetInt32());
                {{/isInteger}}
                {{#isNumber}}
                case JsonTokenType.Number: 
                    return new {{classname}}(reader.GetDecimal());
                {{/isNumber}}
                {{#isString}}
                case JsonTokenType.String: 
                    return new {{classname}}(reader.GetString());
                {{/isString}}
                {{#isBoolean}}
                case JsonTokenType.True:
                case JsonTokenType.False: 
                    return new {{classname}}(reader.GetBoolean());
                {{/isBoolean}}
                {{#isDate}}
                case JsonTokenType.String: 
                    return new {{classname}}(reader.GetDateTime());
                {{/isDate}}
                {{/vendorExtensions.x-duplicated-data-type}}
                {{/composedSchemas.oneOf}}
                case JsonTokenType.StartObject:
                case JsonTokenType.StartArray:
                    using (JsonDocument document = JsonDocument.ParseValue(ref reader))
                    {
                        return {{classname}}.FromJson(document.RootElement.GetRawText());
                    }
                default:
                    throw new JsonException($"Unexpected token type: {reader.TokenType}");
            }
        }
    }
{{/model}}
